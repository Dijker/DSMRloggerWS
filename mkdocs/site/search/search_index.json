{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentatie DSMRloggerWS Voor de project beschrijving ga naar www.aandewiel.nl . Inhoudsopgave Introductie Voorbereiding ArduinoIDE ESP8266 core Data Upload Tool Firmware Benodigd Bibliotheken Installeren Bibliotheken DSMR Firmware van Github Firmware Flashen ESP-01 Data Flashen naar ESP-01 Firmware Flashen DSMR-logger V4 board Data Flashen naar DSMR-logger V4 board Hardware DSMR-logger Versie 3 DSMR-logger Versie 4 Programmer voor de ESP-01 Programmer voor de DSMR-logger Verschillen ESP8266 modules Introductie Je vindt hier de documentatie voor het project DSMR-logger (Versie 4). De DSMR-logger is een hardware en software systeem waarmee de Slimme Meter (vanaf versie 4.0) kan worden uitgelezen. De uitgelezen data (telegrammen) worden in de DSMR-logger opgeslagen en kunnen in de vorm van tabellen en charts worden weergegeven. [ScreenShot DSMR-Actueel]","title":"Documentatie DSMRloggerWS"},{"location":"#documentatie-dsmrloggerws","text":"Voor de project beschrijving ga naar www.aandewiel.nl .","title":"Documentatie DSMRloggerWS"},{"location":"#inhoudsopgave","text":"Introductie Voorbereiding ArduinoIDE ESP8266 core Data Upload Tool Firmware Benodigd Bibliotheken Installeren Bibliotheken DSMR Firmware van Github Firmware Flashen ESP-01 Data Flashen naar ESP-01 Firmware Flashen DSMR-logger V4 board Data Flashen naar DSMR-logger V4 board Hardware DSMR-logger Versie 3 DSMR-logger Versie 4 Programmer voor de ESP-01 Programmer voor de DSMR-logger Verschillen ESP8266 modules","title":"Inhoudsopgave"},{"location":"#introductie","text":"Je vindt hier de documentatie voor het project DSMR-logger (Versie 4). De DSMR-logger is een hardware en software systeem waarmee de Slimme Meter (vanaf versie 4.0) kan worden uitgelezen. De uitgelezen data (telegrammen) worden in de DSMR-logger opgeslagen en kunnen in de vorm van tabellen en charts worden weergegeven. [ScreenShot DSMR-Actueel]","title":"Introductie"},{"location":"benodigdeBibliotheken/","text":"Benodigde Bibliotheken Voor de firmware van de DSMR-logger V4 zijn de volgende bibliotheken nodig: TimeLib Deze is door Paul Stoffregen ontwikkeld. Je kunt hem hier (https://github.com/PaulStoffregen/Time) downloaden. dsmr Deze library is ontwikkeld door Matthijs Kooijman en vormt het hart van de DSMR-logger. Je kunt de bibliotheek hier (https://github.com/matthijskooijman/arduino-dsmr) downloaden. De firmware is getest met Version 0.1 - Commit f79c906 on 18 Sep 2018 . WiFiManager Je kunt de, door Tzapu ontwikkelde, bibliotheek hier (https://github.com/tzapu/WiFiManager) downloaden. De DSMR-logger firmware is getest met version 0.14.0 van deze bibliotheek. TelnetStream Deze bibliotheek is door Jan Drassy ontwikkeld. Je kunt deze bibliotheek hier (https://github.com/jandrassy/TelnetStream) downloaden. De firmware is getest met version 0.0.1 . Let op: De installatie van deze bibliotheek gaat net als de andere bibliotheken. Een update kan echter pas ge\u00efnstalleerd worden als \u00e9\u00e9rst de map TelnetStream-master uit de map Libraries wordt verwijderd! WebSocketsServer Deze bibliotheek is ontwikkeld door Markus Sattler en je kunt hem hier (https://github.com/Links2004/arduinoWebSockets) downloaden. De DSMR-logger firmware is getest met Version 20.05.2015 - commit 72731be on 16 Jan 2019 . SSD1306Ascii 2015 by William Greiman heeft deze bibliotheek ontwikkeld met in het achterhoofd minimaal gebruik van resources (dus: een bibliotheek die weinig geheugen gebruikt). Je kunt de bibliotheek hier (https://github.com/greiman/SSD1306Ascii) downloaden. De DSMR-logger Firmware is getest met Version 1.2.x - Commit 97a05cd on 24 Mar 2019 . Overige libraries Onderstaande libraries zijn onderdeel van de ESP8266 Core en moeten dus niet handmatig ge\u00efnstalleerd worden ! * ESP8266WiFi * ESP8266WebServer * WiFiUdp * ESP8266mDNS * FS * ArduinoOTA [ScreenShot DSMR-Chart Dag]","title":"Benodigd Bibliotheken"},{"location":"benodigdeBibliotheken/#benodigde-bibliotheken","text":"Voor de firmware van de DSMR-logger V4 zijn de volgende bibliotheken nodig:","title":"Benodigde Bibliotheken"},{"location":"benodigdeBibliotheken/#timelib","text":"Deze is door Paul Stoffregen ontwikkeld. Je kunt hem hier (https://github.com/PaulStoffregen/Time) downloaden.","title":"TimeLib"},{"location":"benodigdeBibliotheken/#dsmr","text":"Deze library is ontwikkeld door Matthijs Kooijman en vormt het hart van de DSMR-logger. Je kunt de bibliotheek hier (https://github.com/matthijskooijman/arduino-dsmr) downloaden. De firmware is getest met Version 0.1 - Commit f79c906 on 18 Sep 2018 .","title":"dsmr"},{"location":"benodigdeBibliotheken/#wifimanager","text":"Je kunt de, door Tzapu ontwikkelde, bibliotheek hier (https://github.com/tzapu/WiFiManager) downloaden. De DSMR-logger firmware is getest met version 0.14.0 van deze bibliotheek.","title":"WiFiManager"},{"location":"benodigdeBibliotheken/#telnetstream","text":"Deze bibliotheek is door Jan Drassy ontwikkeld. Je kunt deze bibliotheek hier (https://github.com/jandrassy/TelnetStream) downloaden. De firmware is getest met version 0.0.1 . Let op: De installatie van deze bibliotheek gaat net als de andere bibliotheken. Een update kan echter pas ge\u00efnstalleerd worden als \u00e9\u00e9rst de map TelnetStream-master uit de map Libraries wordt verwijderd!","title":"TelnetStream"},{"location":"benodigdeBibliotheken/#websocketsserver","text":"Deze bibliotheek is ontwikkeld door Markus Sattler en je kunt hem hier (https://github.com/Links2004/arduinoWebSockets) downloaden. De DSMR-logger firmware is getest met Version 20.05.2015 - commit 72731be on 16 Jan 2019 .","title":"WebSocketsServer"},{"location":"benodigdeBibliotheken/#ssd1306ascii","text":"2015 by William Greiman heeft deze bibliotheek ontwikkeld met in het achterhoofd minimaal gebruik van resources (dus: een bibliotheek die weinig geheugen gebruikt). Je kunt de bibliotheek hier (https://github.com/greiman/SSD1306Ascii) downloaden. De DSMR-logger Firmware is getest met Version 1.2.x - Commit 97a05cd on 24 Mar 2019 .","title":"SSD1306Ascii"},{"location":"benodigdeBibliotheken/#overige-libraries","text":"Onderstaande libraries zijn onderdeel van de ESP8266 Core en moeten dus niet handmatig ge\u00efnstalleerd worden ! * ESP8266WiFi * ESP8266WebServer * WiFiUdp * ESP8266mDNS * FS * ArduinoOTA [ScreenShot DSMR-Chart Dag]","title":"Overige libraries"},{"location":"clonenFirmware/","text":"Clonen Firmware De firmware voor de DSMR-logger staat hier (https://github.com/mrWheel/DSMRloggerWS). Er zijn twee manieren om de firmware te clonen. Download de repository als een .zip file gebruik git Als je niet handig bent met git raad ik je aan de repository als een .zip file te downloaden. Download .zip file Klik op de groene knop [Clone or Download] en selecteer [Download ZIP] Er volgt een scherm als dit: Bewaar het .zip bestand op een plek op je computer waar je hem terug kunt vinden. Unzip het DSMRloggerWS-master.zip bestand in de ArduinoIDE Sketch map. Rename de map DSMRloggerWS-master naar DSMRloggerWS (dus zonder -master ) Start de ArduinoIDE (opnieuw) op. Je kunt nu de firmware DSMRloggerWS selecteren en compileren. git clone bla bla [ScreenShot DSMR-Settings]","title":"DSMR-Firmware"},{"location":"clonenFirmware/#clonen-firmware","text":"De firmware voor de DSMR-logger staat hier (https://github.com/mrWheel/DSMRloggerWS). Er zijn twee manieren om de firmware te clonen. Download de repository als een .zip file gebruik git Als je niet handig bent met git raad ik je aan de repository als een .zip file te downloaden.","title":"Clonen Firmware"},{"location":"clonenFirmware/#download-zip-file","text":"Klik op de groene knop [Clone or Download] en selecteer [Download ZIP] Er volgt een scherm als dit: Bewaar het .zip bestand op een plek op je computer waar je hem terug kunt vinden. Unzip het DSMRloggerWS-master.zip bestand in de ArduinoIDE Sketch map. Rename de map DSMRloggerWS-master naar DSMRloggerWS (dus zonder -master ) Start de ArduinoIDE (opnieuw) op. Je kunt nu de firmware DSMRloggerWS selecteren en compileren.","title":"Download .zip file"},{"location":"clonenFirmware/#git-clone","text":"bla bla [ScreenShot DSMR-Settings]","title":"git clone"},{"location":"gh-pages/","text":"Github pages onderhouden Voer, in een command window, de volgende commando's in: cd waar je de boel wilt hebben git clone https://github.com/mrWheel/DSMRloggerHTTP.git cd DSMRloggerHTTP git checkout gh-pages cd mkdocs In de mkdocs map zit een map docs met daarin alle .md bestanden. Pas deze naar hartelust aan. Je kunt vervolgens lokaal een server starten met het commando: mkdocs serve Ga vervolgens met een browser naar http://127.0.0.1:8000 om je werk te bekijken. Als je tevreden bent dan moet je de aangepaste sources naar github pushen: mkdocs build mkdocs gh-deploy git add mkdocs git commit -m reden van deze commit git push -u origin gh-pages Klaar!","title":"Github pages onderhouden"},{"location":"gh-pages/#github-pages-onderhouden","text":"Voer, in een command window, de volgende commando's in: cd waar je de boel wilt hebben git clone https://github.com/mrWheel/DSMRloggerHTTP.git cd DSMRloggerHTTP git checkout gh-pages cd mkdocs In de mkdocs map zit een map docs met daarin alle .md bestanden. Pas deze naar hartelust aan. Je kunt vervolgens lokaal een server starten met het commando: mkdocs serve Ga vervolgens met een browser naar http://127.0.0.1:8000 om je werk te bekijken. Als je tevreden bent dan moet je de aangepaste sources naar github pushen: mkdocs build mkdocs gh-deploy git add mkdocs git commit -m reden van deze commit git push -u origin gh-pages Klaar!","title":"Github pages onderhouden"},{"location":"hardware_DSMR_Programmer/","text":"Programmer voor de DSMR-logger Er zijn verschillende manieren om de DSMR-logger van (nieuwe) firmware te voorzien. Dit gaat het eenvoudigst Over The Air (OTA) maar de eerste keer zal dit altijd bedraad moeten. Je kunt hiervoor een FDTI-adapter gebruiken als je er maar voor zorgt dat Vcc 3v3 is! Je moet de volgende verbindingen maken: Programmer DSMR-logger Opmerking Vcc Vcc LET OP! 3v3 GND GND TxD RxD RxD TxD Uitgaande van een USB-to-Serial adapter is dit eenvoudig te realiseren door met vier draadjes verbinding tussen de USB-to-Serial Adapter en de DSMR-logger te maken. De USB-to-Serial adapter verbind je volgens onderstaand schema met de DSMR-logger: Omdat je hiermee de USB2Serial Adapter als een vrij \"domme\" programmer gebruikt moet je in de ArduinoIDE aangeven dat je bij het uploaden van firmware of de data -map geen speciaal protocol gebruikt. In het Tools -menu geef je bij Reset Method None op. Om nu de firmware of de data -map naar de DSMR-logger te flashen moet je de DSMR-logger eerst in Flash-mode zetten. Dit doe je door achtereenvolgend de volgende handelingen te verrichten: Druk op de FLASH knop en houdt deze ingedrukt Druk vervolgens op de RESET knop Laat de RESET knop los Laat als laatste de FLASH knop los De DSMR-logger staat nu in Flash-mode en blijft in die mode tot er firmware of de inhoud van de data -map wordt ge-upload (of tot je nog een keer op de RESET knop drukt). Hierna start de DSMR-logger normaal op.","title":"Programmer DSMR-logger"},{"location":"hardware_DSMR_Programmer/#programmer-voor-de-dsmr-logger","text":"Er zijn verschillende manieren om de DSMR-logger van (nieuwe) firmware te voorzien. Dit gaat het eenvoudigst Over The Air (OTA) maar de eerste keer zal dit altijd bedraad moeten. Je kunt hiervoor een FDTI-adapter gebruiken als je er maar voor zorgt dat Vcc 3v3 is! Je moet de volgende verbindingen maken: Programmer DSMR-logger Opmerking Vcc Vcc LET OP! 3v3 GND GND TxD RxD RxD TxD Uitgaande van een USB-to-Serial adapter is dit eenvoudig te realiseren door met vier draadjes verbinding tussen de USB-to-Serial Adapter en de DSMR-logger te maken. De USB-to-Serial adapter verbind je volgens onderstaand schema met de DSMR-logger: Omdat je hiermee de USB2Serial Adapter als een vrij \"domme\" programmer gebruikt moet je in de ArduinoIDE aangeven dat je bij het uploaden van firmware of de data -map geen speciaal protocol gebruikt. In het Tools -menu geef je bij Reset Method None op. Om nu de firmware of de data -map naar de DSMR-logger te flashen moet je de DSMR-logger eerst in Flash-mode zetten. Dit doe je door achtereenvolgend de volgende handelingen te verrichten: Druk op de FLASH knop en houdt deze ingedrukt Druk vervolgens op de RESET knop Laat de RESET knop los Laat als laatste de FLASH knop los De DSMR-logger staat nu in Flash-mode en blijft in die mode tot er firmware of de inhoud van de data -map wordt ge-upload (of tot je nog een keer op de RESET knop drukt). Hierna start de DSMR-logger normaal op.","title":"Programmer voor de DSMR-logger"},{"location":"hardware_ESP01_Programmer/","text":"Programmer voor de ESP-01 Je kunt hier (www.aandewiel.nl) een post vinden met instructies hoe je eenvoudige een programmer voor de ESP-01 kunt maken. [ScreenShot USB-to-Serial]","title":"Programmer ESP-01"},{"location":"hardware_ESP01_Programmer/#programmer-voor-de-esp-01","text":"Je kunt hier (www.aandewiel.nl) een post vinden met instructies hoe je eenvoudige een programmer voor de ESP-01 kunt maken. [ScreenShot USB-to-Serial]","title":"Programmer voor de ESP-01"},{"location":"hardware_V3/","text":"DSMR-logger Versie 3 Under Construction","title":"DSMR-logger v3"},{"location":"hardware_V3/#dsmr-logger-versie-3","text":"Under Construction","title":"DSMR-logger Versie 3"},{"location":"hardware_V4/","text":"DSMR-logger Versie 4 Bouwvideo Het bouwen van de DSMR-logger Versie 4 is vrij Recht Toe, Recht Aan . Zoals altijd is het het eenvoudigst om eerst de laagste componenten op de printplaat te solderen en dan de steeds hogere componenten. De laagste componenten zijn de SMD voltage regulator (U1, LM2937-3v3) en de processor (U3, ESP-12). Beide zijn zgn. SMD componenten die eigenlijk niet bedoeld zijn om met de hand te solderen, maar het is toch vrij eenvoudig en goed te doen. Begin met het aanbrengen van een druppeltje soldeer op \u00e9\u00e9n van de pads van de LM2937-3v3 (U1): Plaats nu U1 op zijn plek en verwarm de pad met de soldeer druppel nogmaals met de soldeerboud Als het soldeer is uitgehard zit U1 op zijn plaats en kun je de overige pads solderen. Voor U3 (ESP-12) geldt hetzelfde princiepe .. .. alleen zijn er v\u00e9\u00e9l meer pads te solderen. Hieronder staat een video waarin je het hele bouw-proces kunt volgen: [DSMR-logger Versie 4]","title":"DSMR-logger v4"},{"location":"hardware_V4/#dsmr-logger-versie-4-bouwvideo","text":"Het bouwen van de DSMR-logger Versie 4 is vrij Recht Toe, Recht Aan . Zoals altijd is het het eenvoudigst om eerst de laagste componenten op de printplaat te solderen en dan de steeds hogere componenten. De laagste componenten zijn de SMD voltage regulator (U1, LM2937-3v3) en de processor (U3, ESP-12). Beide zijn zgn. SMD componenten die eigenlijk niet bedoeld zijn om met de hand te solderen, maar het is toch vrij eenvoudig en goed te doen. Begin met het aanbrengen van een druppeltje soldeer op \u00e9\u00e9n van de pads van de LM2937-3v3 (U1): Plaats nu U1 op zijn plek en verwarm de pad met de soldeer druppel nogmaals met de soldeerboud Als het soldeer is uitgehard zit U1 op zijn plaats en kun je de overige pads solderen. Voor U3 (ESP-12) geldt hetzelfde princiepe .. .. alleen zijn er v\u00e9\u00e9l meer pads te solderen. Hieronder staat een video waarin je het hele bouw-proces kunt volgen: [DSMR-logger Versie 4]","title":"DSMR-logger Versie 4 Bouwvideo"},{"location":"installatieArduinoIDE/","text":"Installatie ArduinoIDE Download en installeer de Arduino Integrated Development Environment (IDE) voor het Operating Systeem (OS) waar jouw DeskTop of LapTop computer (er zijn versies voor Windows, Linux en Mac) mee werkt. Na het downloaden moet je het ontvangen bestand uitpakken (unzip of untar) en installeren. Dat installeren is per OS anders maar staat duidelijk op de website van Arduino aangegeven. Eenmaal ge\u00efnstalleerd kun je direct met de Arduino IDE aan de slag. Om de IDE met de ESP8266 microprocessor te kunnen gebruiken moeten we nog wat stappen uitvoeren. [ScreenShot DSMR-Chart Financieel]","title":"ArduinoIDE"},{"location":"installatieArduinoIDE/#installatie-arduinoide","text":"Download en installeer de Arduino Integrated Development Environment (IDE) voor het Operating Systeem (OS) waar jouw DeskTop of LapTop computer (er zijn versies voor Windows, Linux en Mac) mee werkt. Na het downloaden moet je het ontvangen bestand uitpakken (unzip of untar) en installeren. Dat installeren is per OS anders maar staat duidelijk op de website van Arduino aangegeven. Eenmaal ge\u00efnstalleerd kun je direct met de Arduino IDE aan de slag. Om de IDE met de ESP8266 microprocessor te kunnen gebruiken moeten we nog wat stappen uitvoeren. [ScreenShot DSMR-Chart Financieel]","title":"Installatie ArduinoIDE"},{"location":"installatieBibliotheken/","text":"Installatie Bibliotheken Nu je een ArduinoIDE hebt waarmee je ESP8266\u2019s kunt programmeren (flashen) zul je ontdekken dat er door briljante mensen software is ontwikkeld die je kunt gebruiken om complexe projecten te realiseren, zonder dat je zelf het wiel hoeft uit te vinden. Deze software wordt veelal in de vorm van een bibliotheek aangeboden en je hoeft zo\u2019n bibliotheek alleen maar te installeren om er gebruik van te kunnen maken. Bijvoorbeeld een bibliotheek om je ESP8266 van een telnet server te voorzien (met een telnet server kun je via een telnet-client op je DeskTop of LapTop inloggen op je ESP8266). Er blijken hier een aantal bibliotheken voor te bestaan. Als voorbeeld nemen we TelnetStream van Jan Drassy . Na wat Googelen vinden we de software op deze (https://github.com/jandrassy/TelnetStream/) github pagina. Om de bibliotheek te installeren klik je op de groene download knop en selecteer je [Download ZIP]. Onthou waar je het zip-file bewaard. Ga nu naar de ArduinoIDE en selecteer [ Sketch ] = [ Include Library ] = [ Add .ZIP Library ] Er verschijnt een selectie window waar je het zojuist ge-download-de bestand selecteert. De bibliotheek is nu ge\u00efnstalleerd en klaar om gebruikt te worden. De meeste bibliotheken komen met een aantal voorbeeld programma\u2019s waarmee je kunt leren hoe je de bibliotheek kunt gebruiken. Jan Drassy is erg summier met zijn uitleg maar gelukkig is er een map met voorbeelden (nou ja, \u00e9\u00e9n voorbeeld). (sorry, het plaatje is een beetje verknipt) Klik je nu op [ TelnetStreamTest ] dan wordt dit voorbeeld programma in de ArduinoIDE geladen. Installeer op dezelfde manier de bibliotheken die in het vorige hoofdstuk zijn genoemd. [ScreenShot DSMR-Dag]","title":"Installeren Bibliotheken"},{"location":"installatieBibliotheken/#installatie-bibliotheken","text":"Nu je een ArduinoIDE hebt waarmee je ESP8266\u2019s kunt programmeren (flashen) zul je ontdekken dat er door briljante mensen software is ontwikkeld die je kunt gebruiken om complexe projecten te realiseren, zonder dat je zelf het wiel hoeft uit te vinden. Deze software wordt veelal in de vorm van een bibliotheek aangeboden en je hoeft zo\u2019n bibliotheek alleen maar te installeren om er gebruik van te kunnen maken. Bijvoorbeeld een bibliotheek om je ESP8266 van een telnet server te voorzien (met een telnet server kun je via een telnet-client op je DeskTop of LapTop inloggen op je ESP8266). Er blijken hier een aantal bibliotheken voor te bestaan. Als voorbeeld nemen we TelnetStream van Jan Drassy . Na wat Googelen vinden we de software op deze (https://github.com/jandrassy/TelnetStream/) github pagina. Om de bibliotheek te installeren klik je op de groene download knop en selecteer je [Download ZIP]. Onthou waar je het zip-file bewaard. Ga nu naar de ArduinoIDE en selecteer [ Sketch ] = [ Include Library ] = [ Add .ZIP Library ] Er verschijnt een selectie window waar je het zojuist ge-download-de bestand selecteert. De bibliotheek is nu ge\u00efnstalleerd en klaar om gebruikt te worden. De meeste bibliotheken komen met een aantal voorbeeld programma\u2019s waarmee je kunt leren hoe je de bibliotheek kunt gebruiken. Jan Drassy is erg summier met zijn uitleg maar gelukkig is er een map met voorbeelden (nou ja, \u00e9\u00e9n voorbeeld). (sorry, het plaatje is een beetje verknipt) Klik je nu op [ TelnetStreamTest ] dan wordt dit voorbeeld programma in de ArduinoIDE geladen. Installeer op dezelfde manier de bibliotheken die in het vorige hoofdstuk zijn genoemd. [ScreenShot DSMR-Dag]","title":"Installatie Bibliotheken"},{"location":"installatieDataUploadTool/","text":"Installatie Data Upload Tool E\u00e9n van de mooie eigenschappen van de ESP8266 is dat er flash geheugen in zit. Flash geheugen is geheugen dat zijn inhoud ook zonder spanning behoud. Vergelijk het met een SD-kaart. De flash geheugen is, afhankelijk van het bordje, 512kB tot 16MB(!) groot. Een deel van dit flash geheugen wordt gebruikt om jouw programma in op te slaan. Wat er over blijft kan als bestand-systeem worden ingericht (het zgn. SPI Flash File Systeem \u2011SPIFFS\u2011). Je kunt in je programma dit bestand-systeem niet alleen gebruiken om (bijvoorbeeld meet-) gegevens maar ook om de inhoud van, bijvoorbeeld, een web-pagina ( index.html ) of een configuratie-bestand in op te slaan. Een index.html maakt dan natuurlijk onderdeel uit van je programma en ontwikkel je buiten de ESP8266 om. Om het SPI File Systeem voor dit soort bestanden te kunnen gebruiken moet je een \u201cplug-in\u201d in je Arduino Projecten map installeren. De plug-in haal je hier vandaan. Ga naar deze github pagina en klik op de groen knop.. Selecteer vervolgens [Download ZIP]. Ga nu naar je Sketch Location map en maak daarin een nieuwe map tools aan (als deze nog niet bestaat). Pak het zojuist ge-download-de zip bestand uit in deze tools map. Er wordt nu een aantal nieuwe mappen aangemaakt waar de plug-in wordt neergezet. Het pad ziet er ongeveer zo uit: sketchbook location /tools/ESP8266FS/tool/esp8266fs.jar Start de Arduino IDE opnieuw op. Onder [ Tools ] zie je nu een nieuwe optie: \u201cESP8266 Sketch Data Upload\u201d Je kunt nu in de map waar je programma staat een nieuwe map met de naam data maken. Alle bestanden die je vervolgens in deze map zet zullen met [ tools ] - [ ESP8266 Sketch Data Upload ] op het SPIFFS bestand-systeem van je ESP8266 geplaatst worden (mits er voldoende ruimte is natuurlijk). In de selectie van je board moet je, behalve het juiste type board ook aangeven hoeveel ruimte van je Flash geheugen je wilt gebruiken voor het bestand-systeem (v\u00f3\u00f3rdat je je programma naar de ESP8266 upload!). Normaliter zou je dit zo groot mogelijk willen maken, maar als je \u201cOver The Air\u201d programma\u2019s op je ESP8266 wilt zetten (dus zonder fysieke verbinding maar via WiFi) dan moet je er rekening mee houden dat je twee maal de grootte van je programma nodig hebt om dit te kunnen doen. Wat er overblijft kun je als bestand-systeem gebruiken.","title":"Data Upload Tool"},{"location":"installatieDataUploadTool/#installatie-data-upload-tool","text":"E\u00e9n van de mooie eigenschappen van de ESP8266 is dat er flash geheugen in zit. Flash geheugen is geheugen dat zijn inhoud ook zonder spanning behoud. Vergelijk het met een SD-kaart. De flash geheugen is, afhankelijk van het bordje, 512kB tot 16MB(!) groot. Een deel van dit flash geheugen wordt gebruikt om jouw programma in op te slaan. Wat er over blijft kan als bestand-systeem worden ingericht (het zgn. SPI Flash File Systeem \u2011SPIFFS\u2011). Je kunt in je programma dit bestand-systeem niet alleen gebruiken om (bijvoorbeeld meet-) gegevens maar ook om de inhoud van, bijvoorbeeld, een web-pagina ( index.html ) of een configuratie-bestand in op te slaan. Een index.html maakt dan natuurlijk onderdeel uit van je programma en ontwikkel je buiten de ESP8266 om. Om het SPI File Systeem voor dit soort bestanden te kunnen gebruiken moet je een \u201cplug-in\u201d in je Arduino Projecten map installeren. De plug-in haal je hier vandaan. Ga naar deze github pagina en klik op de groen knop.. Selecteer vervolgens [Download ZIP]. Ga nu naar je Sketch Location map en maak daarin een nieuwe map tools aan (als deze nog niet bestaat). Pak het zojuist ge-download-de zip bestand uit in deze tools map. Er wordt nu een aantal nieuwe mappen aangemaakt waar de plug-in wordt neergezet. Het pad ziet er ongeveer zo uit: sketchbook location /tools/ESP8266FS/tool/esp8266fs.jar Start de Arduino IDE opnieuw op. Onder [ Tools ] zie je nu een nieuwe optie: \u201cESP8266 Sketch Data Upload\u201d Je kunt nu in de map waar je programma staat een nieuwe map met de naam data maken. Alle bestanden die je vervolgens in deze map zet zullen met [ tools ] - [ ESP8266 Sketch Data Upload ] op het SPIFFS bestand-systeem van je ESP8266 geplaatst worden (mits er voldoende ruimte is natuurlijk). In de selectie van je board moet je, behalve het juiste type board ook aangeven hoeveel ruimte van je Flash geheugen je wilt gebruiken voor het bestand-systeem (v\u00f3\u00f3rdat je je programma naar de ESP8266 upload!). Normaliter zou je dit zo groot mogelijk willen maken, maar als je \u201cOver The Air\u201d programma\u2019s op je ESP8266 wilt zetten (dus zonder fysieke verbinding maar via WiFi) dan moet je er rekening mee houden dat je twee maal de grootte van je programma nodig hebt om dit te kunnen doen. Wat er overblijft kun je als bestand-systeem gebruiken.","title":"Installatie Data Upload Tool"},{"location":"installatieESP8266core/","text":"Installatie ESP8266 core In de Arduino IDE moet bij \u201cInstellingen\u201d de volgende URL worden ingevoerd achter \u201c Additional Boards Manager URL\u2019s: \u201d (zie rood omlijnde kader) http://arduino.esp8266.com/stable/package_esp8266com_index.json Lees vooral de uitleg in het README.md bestand en de uitgebreide documentatie ! Er kunnen meer additional board manager URL\u2019s worden ingevuld. Je moet ze dan achter elkaar zetten en scheiden door een komma ( , ). Eventueel kun je ook het pad waar je projecten staan (de Sketchbook Location) aanpassen. Standaard verwijst deze naar je \u201cDocumenten\u201d map: C:\\Users\\ LogInNaam \\Documents\\arduino\\ .. en dat is een prima plek! De andere instellingen kun je naar behoefte aanpassen. Hierboven staan de instellingen die ik prettig vind. Na het maken van aanpassingen klik je op [OK]. Er worden regelmatig verbeteringen in de esp8266 core aangebracht. Deze kun je installeren via [ Tools ] - [ Board ] - [ Boards Manager ]. Voer bij filter \u201cesp8266\u201d in. De nieuwste versie is op dit moment 2.5.0.","title":"ESP8266 Core"},{"location":"installatieESP8266core/#installatie-esp8266-core","text":"In de Arduino IDE moet bij \u201cInstellingen\u201d de volgende URL worden ingevoerd achter \u201c Additional Boards Manager URL\u2019s: \u201d (zie rood omlijnde kader) http://arduino.esp8266.com/stable/package_esp8266com_index.json Lees vooral de uitleg in het README.md bestand en de uitgebreide documentatie ! Er kunnen meer additional board manager URL\u2019s worden ingevuld. Je moet ze dan achter elkaar zetten en scheiden door een komma ( , ). Eventueel kun je ook het pad waar je projecten staan (de Sketchbook Location) aanpassen. Standaard verwijst deze naar je \u201cDocumenten\u201d map: C:\\Users\\ LogInNaam \\Documents\\arduino\\ .. en dat is een prima plek! De andere instellingen kun je naar behoefte aanpassen. Hierboven staan de instellingen die ik prettig vind. Na het maken van aanpassingen klik je op [OK]. Er worden regelmatig verbeteringen in de esp8266 core aangebracht. Deze kun je installeren via [ Tools ] - [ Board ] - [ Boards Manager ]. Voer bij filter \u201cesp8266\u201d in. De nieuwste versie is op dit moment 2.5.0.","title":"Installatie ESP8266 core"},{"location":"uploadDataMap_ESP-01/","text":"upload Data map naar ESP-01 Iedereen die hier aan wil bijdragen: graag!","title":"Data Flashen naar ESP-01"},{"location":"uploadDataMap_ESP-01/#upload-data-map-naar-esp-01","text":"Iedereen die hier aan wil bijdragen: graag!","title":"upload Data map naar ESP-01"},{"location":"uploadDataMap_ESP-12/","text":"upload Data map naar DSMR-logger V4 board Zorg dat de Serial Monitor is afgesloten. Sluit de programmer aan op de DSMR-logger. Druk nu de [Flash] knop in en houdt deze ingedrukt. Druk vervolgens de [Reset] knop in en laat deze weer los. Laat nu ook de [Flash] knop los. De DSMR-logger staat nu in \"Flash-mode\" en wacht (geduldig) tot de inhoud van de data map wordt opgestuurd. Ga in de Arduino IDE naar Tools - ESP8266 Sketch Data Upload Alle bestanden in de data map worden nu naar het SPIFFS overgezet. Hierna zal de DSMR-logger weer normaal opstarten, maar met de nieuw SPIFFS inhoud. Pas op! Hou er rekening mee dat eventuele data-bestanden die al op SPIFFS stonden nu weg zijn! Als je ze niet kwijt wil moet je er eerst een kopie van maken op je computer en deze, na het flashen van SPIFFS weer terug zetten (dat kan met de DSMR-logger FSexplorer )!","title":"Data Flashen naar ESP-12"},{"location":"uploadDataMap_ESP-12/#upload-data-map-naar-dsmr-logger-v4-board","text":"Zorg dat de Serial Monitor is afgesloten. Sluit de programmer aan op de DSMR-logger. Druk nu de [Flash] knop in en houdt deze ingedrukt. Druk vervolgens de [Reset] knop in en laat deze weer los. Laat nu ook de [Flash] knop los. De DSMR-logger staat nu in \"Flash-mode\" en wacht (geduldig) tot de inhoud van de data map wordt opgestuurd. Ga in de Arduino IDE naar Tools - ESP8266 Sketch Data Upload Alle bestanden in de data map worden nu naar het SPIFFS overgezet. Hierna zal de DSMR-logger weer normaal opstarten, maar met de nieuw SPIFFS inhoud. Pas op! Hou er rekening mee dat eventuele data-bestanden die al op SPIFFS stonden nu weg zijn! Als je ze niet kwijt wil moet je er eerst een kopie van maken op je computer en deze, na het flashen van SPIFFS weer terug zetten (dat kan met de DSMR-logger FSexplorer )!","title":"upload Data map naar DSMR-logger V4 board"},{"location":"uploadFirmware_ESP-01/","text":"Firmware naar ESP-01 Flashen Om de firmware naar de ESP-01 (black Edition) te kunnen flashen moet deze eerst voor deze ESP-01 geschikt worden gemaakt. In de ArduinoIDE moet in het eerste tab-blad de volgende regels z\u00f3 worden ingesteld: /******************** compiler options ********************************************/ // #define IS_ESP12 // define if it's an ESP-12 // #define USE_ARDUINO_OTA // define if there is enough memory // #define HAS_OLED_SSD1306 // define if an OLED display is present // #define HAS_NO_METER // define if No Meter is attached /******************** don't change anything below this line ************************/ Vervolgens moeten de [ Boards ] settings als volgt worden ingevuld: Voor een ESP-01S moeten dezelfde instellingen worden gebruikt, alleen zit bij dit board de \"Builtin Led:\" op GPIO2 ! Stop de ESP-01 in de programmer en sluit deze aan op je computer. Vergeet niet de juiste Port te selecteren en druk op het Compile and Upload icoon.","title":"Firmware Flashen naar ESP-01"},{"location":"uploadFirmware_ESP-01/#firmware-naar-esp-01-flashen","text":"Om de firmware naar de ESP-01 (black Edition) te kunnen flashen moet deze eerst voor deze ESP-01 geschikt worden gemaakt. In de ArduinoIDE moet in het eerste tab-blad de volgende regels z\u00f3 worden ingesteld: /******************** compiler options ********************************************/ // #define IS_ESP12 // define if it's an ESP-12 // #define USE_ARDUINO_OTA // define if there is enough memory // #define HAS_OLED_SSD1306 // define if an OLED display is present // #define HAS_NO_METER // define if No Meter is attached /******************** don't change anything below this line ************************/ Vervolgens moeten de [ Boards ] settings als volgt worden ingevuld: Voor een ESP-01S moeten dezelfde instellingen worden gebruikt, alleen zit bij dit board de \"Builtin Led:\" op GPIO2 ! Stop de ESP-01 in de programmer en sluit deze aan op je computer. Vergeet niet de juiste Port te selecteren en druk op het Compile and Upload icoon.","title":"Firmware naar ESP-01 Flashen"},{"location":"uploadFirmware_ESP-12/","text":"Firmware Flashen naar ESP-12 Versie 4 van de DSMR-logger hardware maakt gebruik van een ESP-12 processor. Deze processor zit op de printplaat van de DSMR-logger gesoldeerd en moet dus, op de printplaat, geflashed worden. Om de firmware naar de ESP-12 te kunnen flashen moet deze eerst voor de ESP-12 geschikt worden gemaakt. Dit doe je door in de ArduinoIDE de #defines in het eerste tab-blad aan te passen. Heb je g\u00e9\u00e9n Oled-display: /******************** compiler options ********************************************/ #define IS_ESP12 // define if it's an ESP-12 #define USE_ARDUINO_OTA // define if there is enough memory // #define HAS_OLED_SSD1306 // define if an OLED display is present // #define HAS_NO_METER // define if No Meter is attached /******************** don't change anything below this line ************************/ Heb je wel een Oled-display op de DSMR-logger aangesloten dan moeten de compiler options als volgt worden aangepast. /******************** compiler options ********************************************/ #define IS_ESP12 // define if it's an ESP-12 #define USE_ARDUINO_OTA // define if there is enough memory #define HAS_OLED_SSD1306 // define if an OLED display is present // #define HAS_NO_METER // define if No Meter is attached /******************** don't change anything below this line ************************/ Vervolgens moeten de Boards settings als volgt worden ingevuld: Sluit nu de USB- ESP12 programmer aan op de Program -header van de DSMR-logger. Druk nu de [Flash] knop in en houd deze ingedrukt Druk nu op de [Reset] knop en laat deze weer los Laat nu de [Flash] knop los De DSMR-logger staat nu in Flash-mode en blijft in die mode tot er gegevens vanaf de programmer naar de DSMR-logger zijn overgebracht \u00f3f tot je nog een keer op de [Reset] knop drukt. Vergeet niet in de ArduinoIDE de Port te selecteren waarop je de USB- ESP12 programmer hebt aangesloten en druk op het Compile and Upload icoon.","title":"Firmware Flashen naar ESP-12"},{"location":"uploadFirmware_ESP-12/#firmware-flashen-naar-esp-12","text":"Versie 4 van de DSMR-logger hardware maakt gebruik van een ESP-12 processor. Deze processor zit op de printplaat van de DSMR-logger gesoldeerd en moet dus, op de printplaat, geflashed worden. Om de firmware naar de ESP-12 te kunnen flashen moet deze eerst voor de ESP-12 geschikt worden gemaakt. Dit doe je door in de ArduinoIDE de #defines in het eerste tab-blad aan te passen. Heb je g\u00e9\u00e9n Oled-display: /******************** compiler options ********************************************/ #define IS_ESP12 // define if it's an ESP-12 #define USE_ARDUINO_OTA // define if there is enough memory // #define HAS_OLED_SSD1306 // define if an OLED display is present // #define HAS_NO_METER // define if No Meter is attached /******************** don't change anything below this line ************************/ Heb je wel een Oled-display op de DSMR-logger aangesloten dan moeten de compiler options als volgt worden aangepast. /******************** compiler options ********************************************/ #define IS_ESP12 // define if it's an ESP-12 #define USE_ARDUINO_OTA // define if there is enough memory #define HAS_OLED_SSD1306 // define if an OLED display is present // #define HAS_NO_METER // define if No Meter is attached /******************** don't change anything below this line ************************/ Vervolgens moeten de Boards settings als volgt worden ingevuld: Sluit nu de USB- ESP12 programmer aan op de Program -header van de DSMR-logger. Druk nu de [Flash] knop in en houd deze ingedrukt Druk nu op de [Reset] knop en laat deze weer los Laat nu de [Flash] knop los De DSMR-logger staat nu in Flash-mode en blijft in die mode tot er gegevens vanaf de programmer naar de DSMR-logger zijn overgebracht \u00f3f tot je nog een keer op de [Reset] knop drukt. Vergeet niet in de ArduinoIDE de Port te selecteren waarop je de USB- ESP12 programmer hebt aangesloten en druk op het Compile and Upload icoon.","title":"Firmware Flashen naar ESP-12"},{"location":"verschillenESP8266/","text":"verschillen ESP8266 ESP-01 ESP-01 (Black Edition) ESP-01S ESP-12 ESP-01 De ESP-01 heeft slechts 512MB flash geheugen en is niet geschikt voor de DSMR-logger ESP-01 (Black Edition) Dit is de versie van de ESP8266 waar versie 3 van de DSMR-logger op is gebaseerd. Deze versie heeft een rode power led en een blauwe led die op GPIO01 is aangesloten. Deze versie heeft 1MB flash geheugen. ESP-01S Oorspronkelijk had deze ESP-01 ook slecht 512MB flash geheugen. De versie die nu meestal verkocht wordt heeft echter 1MB geheugen. Het is dus wel zaak op te letten wat voor versie je koopt! De ESP-01S heeft geen power led en de blauwe led is niet op GPIO01 maar op GPIO02 aangesloten. Deze versie van de ESP-01 is geschikt voor de DSMR-logger ESP-12 Deze ESP8266 heeft 4MB flash geheugen. Een blauwe led is aangesloten op GPIO02. Daarnaast heeft de ESP-12 12 GPIO pinnen waarvan de meeste vrij te gebruiken zijn. Versie 4 van de DSMR-logger is ontworpen rond de ESP-12. [ScreenShot DSMR-SystemInfo]","title":"Verschillen ESP8266 modules'"},{"location":"verschillenESP8266/#verschillen-esp8266","text":"ESP-01 ESP-01 (Black Edition) ESP-01S ESP-12","title":"verschillen ESP8266"},{"location":"verschillenESP8266/#esp-01","text":"De ESP-01 heeft slechts 512MB flash geheugen en is niet geschikt voor de DSMR-logger","title":"ESP-01"},{"location":"verschillenESP8266/#esp-01-black-edition","text":"Dit is de versie van de ESP8266 waar versie 3 van de DSMR-logger op is gebaseerd. Deze versie heeft een rode power led en een blauwe led die op GPIO01 is aangesloten. Deze versie heeft 1MB flash geheugen.","title":"ESP-01 (Black Edition)"},{"location":"verschillenESP8266/#esp-01s","text":"Oorspronkelijk had deze ESP-01 ook slecht 512MB flash geheugen. De versie die nu meestal verkocht wordt heeft echter 1MB geheugen. Het is dus wel zaak op te letten wat voor versie je koopt! De ESP-01S heeft geen power led en de blauwe led is niet op GPIO01 maar op GPIO02 aangesloten. Deze versie van de ESP-01 is geschikt voor de DSMR-logger","title":"ESP-01S"},{"location":"verschillenESP8266/#esp-12","text":"Deze ESP8266 heeft 4MB flash geheugen. Een blauwe led is aangesloten op GPIO02. Daarnaast heeft de ESP-12 12 GPIO pinnen waarvan de meeste vrij te gebruiken zijn. Versie 4 van de DSMR-logger is ontworpen rond de ESP-12. [ScreenShot DSMR-SystemInfo]","title":"ESP-12"}]}